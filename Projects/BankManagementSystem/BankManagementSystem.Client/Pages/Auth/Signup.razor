@page "/sign-up"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>Sing-up</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

<form>
    <div class="form-group">
        <label for="FirstName">FirstName:</label>
        <input class="form-control" @bind="@registerModel.FirstName" />
    </div>
    <div class="form-group">
        <label for="LastName">LastName:</label>
        <input class="form-control" @bind="@registerModel.LastName" />
    </div>
    <div class="form-group">
        <label for="username">Username:</label>
        <input id="username" class="form-control" @bind="@registerModel.Username" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <input id="password" type="password" class="form-control" @bind="@registerModel.Password" />
    </div>

    <div class="form-group">
        <button type="button" class="btn btn-primary" @onclick="Register">Sign-up</button>
        <label>If you already have account </label>
        <a href="/sign-in">Sign-in</a>
    </div>
</form>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage;

    private async Task Register()
    {
        if (!registerModel.IsValid())
        {
            errorMessage = $"All fields are not added";
            return;
        }

        var response = await httpClient.PostAsJsonAsync("worker/create", registerModel);
        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("/sing-in");
        }
        else
        {
            var errorText = await response.Content.ReadAsStringAsync();
            errorMessage = $"Failed to register user. Server response: {errorText}";
        }
    }

    public class RegisterModel
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }

        public bool IsValid()
        {
            return !(string.IsNullOrEmpty(FirstName) || string.IsNullOrEmpty(LastName) || string.IsNullOrEmpty(Username) || string.IsNullOrEmpty(Password));
        }
    }
}
